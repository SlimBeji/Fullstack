definitions:
  routes.DeleteResponseExample:
    properties:
      message:
        example: Deleted user 507f1f77bcf86cd799439011
        type: string
    type: object
  routes.ResponseExample:
    properties:
      message:
        type: string
    type: object
  schemas.EncodedToken:
    properties:
      access_token:
        description: A generated web token. The 'Bearer ' prefix needs to be added
          for authentication
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2ODIyNDVhOWY2YTU5ZjVlNjM2Y2NmYjEiLCJlbWFpbCI6ImJlamkuc2xpbUB5YWhvby5mciIsImlhdCI6MTc0NzMzNjUxMCwiZXhwIjoxNzQ3MzQwMTEwfQ.C4DCJKvGWhpHClpqmxHyxKLPYDOZDUlr-LA_2IflTXM
        type: string
      email:
        description: The user email
        example: mslimbeji@gmail.com
        type: string
      expires_in:
        description: The UNIX timestamp the token expires at
        example: 1751879562
        type: integer
      token_type:
        description: The type of token. Only 'bearer' is supported.
        enum:
        - bearer
        example: bearer
        type: string
      userId:
        description: The user ID, 24 characters
        example: 683b21134e2e5d46978daf1f
        type: string
    required:
    - access_token
    - email
    - expires_in
    - token_type
    - userId
    type: object
  schemas.UserPut:
    properties:
      email:
        description: The user email
        example: mslimbeji@gmail.com
        type: string
      name:
        description: The user name, two characters at least
        example: Slim Beji
        minLength: 2
        type: string
      password:
        description: The user password, 8 characters at least
        example: very_secret
        minLength: 8
        type: string
    type: object
  schemas.UserRead:
    properties:
      email:
        description: The user email
        example: mslimbeji@gmail.com
        type: string
      id:
        description: The user ID, 24 characters
        example: 683b21134e2e5d46978daf1f
        type: string
      imageUrl:
        description: local url on the storage
        example: avatar2_80e32f88-c9a5-4fcd-8a56-76b5889440cd.jpg
        type: string
      isAdmin:
        description: Whether the user is an admin or not
        example: false
        type: boolean
      name:
        description: The user name, two characters at least
        example: Slim Beji
        minLength: 2
        type: string
      places:
        description: The id of places belonging to the user, 24 characters
        example:
        - 683b21134e2e5d46978daf1f
        items:
          type: string
        type: array
    required:
    - email
    - id
    - isAdmin
    - name
    - places
    type: object
info:
  contact: {}
paths:
  /api/auth/signin:
    post:
      consumes:
      - application/x-www-form-urlencoded
      parameters:
      - default: very_secret
        description: The user password, 8 characters at least
        in: formData
        minLength: 8
        name: password
        required: true
        type: string
      - default: mslimbeji@gmail.com
        description: The user email (We use username here because of OAuth spec)
        in: formData
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.EncodedToken'
      summary: User authentication
      tags:
      - Auth
  /api/auth/signup:
    post:
      consumes:
      - multipart/form-data
      parameters:
      - description: The user email
        example: mslimbeji@gmail.com
        in: formData
        name: email
        required: true
        type: string
      - description: The user name, two characters at least
        example: Slim Beji
        in: formData
        minLength: 2
        name: name
        required: true
        type: string
      - description: The user password, 8 characters at least
        example: very_secret
        in: formData
        minLength: 8
        name: password
        required: true
        type: string
      - description: User's profile image (JPEG)
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.EncodedToken'
      summary: User registration
      tags:
      - Auth
  /api/hello-world/:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.ResponseExample'
      summary: Hello World Endpoint
      tags:
      - Hello World
  /api/hello-world/admin:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.ResponseExample'
      security:
      - OAuth2Password:
        - admin
      summary: Hello World Endpoint for admins only
      tags:
      - Hello World
  /api/hello-world/user:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.ResponseExample'
      security:
      - OAuth2Password:
        - admin
      summary: Hello World Endpoint for authenticated users
      tags:
      - Hello World
  /api/users:
    post:
      consumes:
      - multipart/form-data
      parameters:
      - description: The user email
        example: mslimbeji@gmail.com
        in: formData
        name: email
        required: true
        type: string
      - description: Whether the user is an admin or not
        example: false
        in: formData
        name: isAdmin
        required: true
        type: boolean
      - description: The user name, two characters at least
        example: Slim Beji
        in: formData
        minLength: 2
        name: name
        required: true
        type: string
      - description: The user password, 8 characters at least
        example: very_secret
        in: formData
        minLength: 8
        name: password
        required: true
        type: string
      - description: the user profile image
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.UserRead'
      security:
      - OAuth2Password:
        - admin
      summary: User creation
      tags:
      - User
  /api/users/{userId}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.DeleteResponseExample'
      security:
      - OAuth2Password:
        - admin
      summary: Delete user by id
      tags:
      - User
    get:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.UserRead'
      security:
      - OAuth2Password:
        - admin
      summary: Search and Retrieve user by id
      tags:
      - User
    put:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      - description: PUT parameters
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/schemas.UserPut'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.UserRead'
      security:
      - OAuth2Password:
        - admin
      summary: Update users
      tags:
      - User
securityDefinitions:
  OAuth2Password:
    flow: password
    tokenUrl: /api/auth/signin
    type: oauth2
swagger: "2.0"
tags:
- description: Registration and Authentication endpoints
  name: Auth
- description: Hello World endpoints
  name: Hello World
- description: User crud endpoints
  name: User
- description: Place crud endpoints
  name: Place

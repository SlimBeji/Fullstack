definitions:
  routes.PlaceDeleteResponse:
    properties:
      message:
        example: Deleted place 507f1f77bcf86cd799439011
        type: string
    type: object
  routes.ResponseExample:
    properties:
      message:
        type: string
    type: object
  routes.UserDeleteResponse:
    properties:
      message:
        example: Deleted user 507f1f77bcf86cd799439011
        type: string
    type: object
  schemas.EncodedToken:
    properties:
      access_token:
        description: A generated web token. The 'Bearer ' prefix needs to be added
          for authentication
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2ODIyNDVhOWY2YTU5ZjVlNjM2Y2NmYjEiLCJlbWFpbCI6ImJlamkuc2xpbUB5YWhvby5mciIsImlhdCI6MTc0NzMzNjUxMCwiZXhwIjoxNzQ3MzQwMTEwfQ.C4DCJKvGWhpHClpqmxHyxKLPYDOZDUlr-LA_2IflTXM
        type: string
      email:
        description: The user email
        example: mslimbeji@gmail.com
        type: string
      expires_in:
        description: The UNIX timestamp the token expires at
        example: 1751879562
        type: integer
      token_type:
        description: The type of token. Only 'bearer' is supported.
        enum:
        - bearer
        example: bearer
        type: string
      userId:
        description: The user ID, 24 characters
        example: 683b21134e2e5d46978daf1f
        type: string
    type: object
  schemas.Location:
    properties:
      lat:
        description: The latitude of the place
        example: 51.48180425016331
        type: number
      lng:
        description: The longitude of the place
        example: -0.19090418688755467
        type: number
    type: object
  schemas.PlaceFilters:
    properties:
      address:
        description: The place address
        example:
        - regex:d{2} Boulevard
        items:
          type: string
        type: array
      creatorId:
        description: The ID of the place creator, 24 characters
        example:
        - eq:683b21134e2e5d46978daf1f
        items:
          type: string
        type: array
      description:
        description: The place description, 10 characters minimum
        example:
        - regex:football
        items:
          type: string
        type: array
      fields:
        example:
        - id
        - title
        items:
          type: string
        type: array
      id:
        description: The ID of the place 24 characters
        example:
        - 683b21134e2e5d46978daf1f
        items:
          type: string
        type: array
      locationLat:
        description: The latitude of the place
        example:
        - gt:3.5
        items:
          type: string
        type: array
      locationLng:
        description: The longitude of the place
        example:
        - lt:4.5
        items:
          type: string
        type: array
      page:
        default: 1
        type: integer
      size:
        default: 100
        type: integer
      sort:
        example:
        - createdAt
        items:
          type: string
        type: array
      title:
        description: The place title/name, 10 characters minimum
        example:
        - eq:Some Place
        items:
          type: string
        type: array
    type: object
  schemas.PlacePut:
    properties:
      address:
        description: The place address
        example: Fulham road
        minLength: 10
        type: string
      creatorId:
        description: The ID of the place creator, 24 characters
        example: 683b21134e2e5d46978daf1f
        type: string
      description:
        description: The place description, 10 characters minimum
        example: Stadium of Chelsea football club
        minLength: 10
        type: string
      location:
        allOf:
        - $ref: '#/definitions/schemas.Location'
        description: Location object (can be sent as JSON string)
      title:
        description: The place title/name, 10 characters minimum
        example: Stamford Bridge
        minLength: 10
        type: string
    type: object
  schemas.PlaceRead:
    properties:
      address:
        description: The place address
        example: Fulham road
        minLength: 10
        type: string
      creatorId:
        description: The ID of the place creator, 24 characters
        example: 683b21134e2e5d46978daf1f
        type: string
      description:
        description: The place description, 10 characters minimum
        example: Stadium of Chelsea football club
        minLength: 10
        type: string
      id:
        description: The ID of the place 24 characters
        example: 683b21134e2e5d46978daf1f
        type: string
      imageUrl:
        description: local url on the storage
        example: avatar2_80e32f88-c9a5-4fcd-8a56-76b5889440cd.jpg
        type: string
      location:
        allOf:
        - $ref: '#/definitions/schemas.Location'
        description: Location object (can be sent as JSON string)
      title:
        description: The place title/name, 10 characters minimum
        example: Stamford Bridge
        minLength: 10
        type: string
    type: object
  schemas.PlacesPaginated:
    properties:
      data:
        items:
          $ref: '#/definitions/schemas.PlaceRead'
        type: array
      page:
        type: integer
      totalCount:
        type: integer
      totalPages:
        type: integer
    type: object
  schemas.UserFilters:
    properties:
      email:
        description: The user email
        example:
        - eq:mslimbeji@gmail.com
        items:
          type: string
        type: array
      fields:
        example:
        - id
        - name
        items:
          type: string
        type: array
      id:
        description: The user ID, 24 characters
        example:
        - 683b21134e2e5d46978daf1f
        items:
          type: string
        type: array
      name:
        description: The user name, two characters at least
        example:
        - eq:Slim Beji
        items:
          type: string
        type: array
      page:
        default: 1
        type: integer
      size:
        default: 100
        type: integer
      sort:
        example:
        - createdAt
        items:
          type: string
        type: array
    type: object
  schemas.UserPut:
    properties:
      email:
        description: The user email
        example: mslimbeji@gmail.com
        type: string
      name:
        description: The user name, two characters at least
        example: Slim Beji
        minLength: 2
        type: string
      password:
        description: The user password, 8 characters at least
        example: very_secret
        minLength: 8
        type: string
    type: object
  schemas.UserRead:
    properties:
      email:
        description: The user email
        example: mslimbeji@gmail.com
        type: string
      id:
        description: The user ID, 24 characters
        example: 683b21134e2e5d46978daf1f
        type: string
      imageUrl:
        description: local url on the storage
        example: avatar2_80e32f88-c9a5-4fcd-8a56-76b5889440cd.jpg
        type: string
      isAdmin:
        description: Whether the user is an admin or not
        example: false
        type: boolean
      name:
        description: The user name, two characters at least
        example: Slim Beji
        minLength: 2
        type: string
      places:
        description: The id of places belonging to the user, 24 characters
        example:
        - 683b21134e2e5d46978daf1f
        items:
          type: string
        type: array
    type: object
  schemas.UsersPaginated:
    properties:
      data:
        items:
          $ref: '#/definitions/schemas.PlaceRead'
        type: array
      page:
        type: integer
      totalCount:
        type: integer
      totalPages:
        type: integer
    type: object
info:
  contact: {}
paths:
  /api/auth/signin:
    post:
      consumes:
      - application/x-www-form-urlencoded
      parameters:
      - default: very_secret
        description: The user password, 8 characters at least
        in: formData
        minLength: 8
        name: password
        type: string
      - default: mslimbeji@gmail.com
        description: The user email (We use username here because of OAuth spec)
        in: formData
        name: username
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.EncodedToken'
      summary: User authentication
      tags:
      - Auth
  /api/auth/signup:
    post:
      consumes:
      - multipart/form-data
      parameters:
      - description: The user email
        example: mslimbeji@gmail.com
        in: formData
        name: email
        type: string
      - description: The user name, two characters at least
        example: Slim Beji
        in: formData
        minLength: 2
        name: name
        type: string
      - description: The user password, 8 characters at least
        example: very_secret
        in: formData
        minLength: 8
        name: password
        type: string
      - description: User's profile image (JPEG)
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.EncodedToken'
      summary: User registration
      tags:
      - Auth
  /api/hello-world/:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.ResponseExample'
      summary: Hello World Endpoint
      tags:
      - Hello World
  /api/hello-world/admin:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.ResponseExample'
      security:
      - OAuth2Password:
        - admin
      summary: Hello World Endpoint for admins only
      tags:
      - Hello World
  /api/hello-world/user:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.ResponseExample'
      security:
      - OAuth2Password:
        - admin
      summary: Hello World Endpoint for authenticated users
      tags:
      - Hello World
  /api/places:
    post:
      consumes:
      - multipart/form-data
      parameters:
      - description: The place address
        example: Fulham road
        in: formData
        minLength: 10
        name: address
        type: string
      - description: The ID of the place creator, 24 characters
        example: 683b21134e2e5d46978daf1f
        in: formData
        name: creatorId
        type: string
      - description: The place description, 10 characters minimum
        example: Stadium of Chelsea football club
        in: formData
        minLength: 10
        name: description
        type: string
      - description: The latitude of the place
        example: 51.48180425016331
        in: formData
        name: lat
        type: number
      - description: The longitude of the place
        example: -0.19090418688755467
        in: formData
        name: lng
        type: number
      - description: The place title/name, 10 characters minimum
        example: Stamford Bridge
        in: formData
        minLength: 10
        name: title
        type: string
      - description: Place Image (JPEG)
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.PlaceRead'
      security:
      - OAuth2Password:
        - admin
      summary: Place creation
      tags:
      - Place
  /api/places/:
    get:
      consumes:
      - application/json
      parameters:
      - collectionFormat: multi
        description: The place address
        example:
        - regex:d{2} Boulevard
        in: query
        items:
          type: string
        name: address
        type: array
      - collectionFormat: multi
        description: The ID of the place creator, 24 characters
        example:
        - eq:683b21134e2e5d46978daf1f
        in: query
        items:
          type: string
        name: creatorId
        type: array
      - collectionFormat: multi
        description: The place description, 10 characters minimum
        example:
        - regex:football
        in: query
        items:
          type: string
        name: description
        type: array
      - collectionFormat: csv
        example:
        - id
        - title
        in: query
        items:
          type: string
        name: fields
        type: array
      - collectionFormat: multi
        description: The ID of the place 24 characters
        example:
        - 683b21134e2e5d46978daf1f
        in: query
        items:
          type: string
        name: id
        type: array
      - collectionFormat: multi
        description: The latitude of the place
        example:
        - gt:3.5
        in: query
        items:
          type: string
        name: locationLat
        type: array
      - collectionFormat: multi
        description: The longitude of the place
        example:
        - lt:4.5
        in: query
        items:
          type: string
        name: locationLng
        type: array
      - default: 1
        in: query
        name: page
        type: integer
      - default: 100
        in: query
        name: size
        type: integer
      - collectionFormat: csv
        example:
        - createdAt
        in: query
        items:
          type: string
        name: sort
        type: array
      - collectionFormat: multi
        description: The place title/name, 10 characters minimum
        example:
        - eq:Some Place
        in: query
        items:
          type: string
        name: title
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.PlacesPaginated'
      security:
      - OAuth2Password:
        - admin
      summary: Search and Filter places
      tags:
      - Place
  /api/places/{placeId}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Place ID
        in: path
        name: placeId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.PlaceDeleteResponse'
      security:
      - OAuth2Password:
        - admin
      summary: Delete place by id
      tags:
      - Place
    get:
      consumes:
      - application/json
      parameters:
      - description: Place ID
        in: path
        name: placeId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.PlaceRead'
      security:
      - OAuth2Password:
        - admin
      summary: Search and Retrieve place by id
      tags:
      - Place
    put:
      consumes:
      - application/json
      parameters:
      - description: Place ID
        in: path
        name: placeId
        required: true
        type: string
      - description: PUT parameters
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/schemas.PlacePut'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.PlaceRead'
      security:
      - OAuth2Password:
        - admin
      summary: Update places
      tags:
      - Place
  /api/places/query:
    post:
      consumes:
      - application/json
      parameters:
      - description: POST parameters
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/schemas.PlaceFilters'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.PlacesPaginated'
      security:
      - OAuth2Password:
        - admin
      summary: Search and Retrieve places
      tags:
      - Place
  /api/users:
    post:
      consumes:
      - multipart/form-data
      parameters:
      - description: The user email
        example: mslimbeji@gmail.com
        in: formData
        name: email
        type: string
      - description: Whether the user is an admin or not
        example: false
        in: formData
        name: isAdmin
        type: boolean
      - description: The user name, two characters at least
        example: Slim Beji
        in: formData
        minLength: 2
        name: name
        type: string
      - description: The user password, 8 characters at least
        example: very_secret
        in: formData
        minLength: 8
        name: password
        type: string
      - description: the user profile image
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.UserRead'
      security:
      - OAuth2Password:
        - admin
      summary: User creation
      tags:
      - User
  /api/users/:
    get:
      consumes:
      - application/json
      parameters:
      - collectionFormat: multi
        description: The user email
        example:
        - eq:mslimbeji@gmail.com
        in: query
        items:
          type: string
        name: email
        type: array
      - collectionFormat: csv
        example:
        - id
        - name
        in: query
        items:
          type: string
        name: fields
        type: array
      - collectionFormat: multi
        description: The user ID, 24 characters
        example:
        - 683b21134e2e5d46978daf1f
        in: query
        items:
          type: string
        name: id
        type: array
      - collectionFormat: multi
        description: The user name, two characters at least
        example:
        - eq:Slim Beji
        in: query
        items:
          type: string
        name: name
        type: array
      - default: 1
        in: query
        name: page
        type: integer
      - default: 100
        in: query
        name: size
        type: integer
      - collectionFormat: csv
        example:
        - createdAt
        in: query
        items:
          type: string
        name: sort
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.UsersPaginated'
      security:
      - OAuth2Password:
        - admin
      summary: Search and Filter users
      tags:
      - User
  /api/users/{userId}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.UserDeleteResponse'
      security:
      - OAuth2Password:
        - admin
      summary: Delete user by id
      tags:
      - User
    get:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.UserRead'
      security:
      - OAuth2Password:
        - admin
      summary: Search and Retrieve user by id
      tags:
      - User
    put:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: string
      - description: PUT parameters
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/schemas.UserPut'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.UserRead'
      security:
      - OAuth2Password:
        - admin
      summary: Update users
      tags:
      - User
  /api/users/query:
    post:
      consumes:
      - application/json
      parameters:
      - description: POST parameters
        in: body
        name: params
        required: true
        schema:
          $ref: '#/definitions/schemas.UserFilters'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schemas.UsersPaginated'
      security:
      - OAuth2Password:
        - admin
      summary: Search and Retrieve users
      tags:
      - User
securityDefinitions:
  OAuth2Password:
    flow: password
    tokenUrl: /api/auth/signin
    type: oauth2
swagger: "2.0"
tags:
- description: Registration and Authentication endpoints
  name: Auth
- description: Hello World endpoints
  name: Hello World
- description: User crud endpoints
  name: User
- description: Place crud endpoints
  name: Place

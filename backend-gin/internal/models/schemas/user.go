// Code generated by go generate; DO NOT EDIT.
package schemas

import (
	"backend/internal/types_"
	"mime/multipart"
)

type UserDB struct {
	Id       string   `json:"id" validate:"required,hexadecimal,len=24" example:"683b21134e2e5d46978daf1f" bson:"_id,omitempty"`         // The user ID, 24 characters
	Name     string   `json:"name" validate:"required,min=2" example:"Slim Beji" bson:"name"`                                            // The user name, two characters at least
	Email    string   `json:"email" validate:"required,email" example:"mslimbeji@gmail.com" bson:"email"`                                // The user email
	IsAdmin  bool     `json:"isAdmin" validate:"required" example:"false" bson:"isAdmin"`                                                // Whether the user is an admin or not
	Password any      `json:"password" validate:"required,min=8" example:"very_secret" bson:"password"`                                  // The user password, 8 characters at least
	ImageUrl string   `json:"imageUrl" example:"avatar2_80e32f88-c9a5-4fcd-8a56-76b5889440cd.jpg" bson:"imageUrl"`                       // local url on the storage
	Places   []string `json:"places" validate:"required,dive,hexadecimal,len=24" example:"[\"683b21134e2e5d46978daf1f\"]" bson:"places"` // The id of places belonging to the user, 24 characters
}

type UserSeed struct {
	Ref      int
	Name     string `json:"name" validate:"required,min=2" example:"Slim Beji" bson:"name"`                      // The user name, two characters at least
	Email    string `json:"email" validate:"required,email" example:"mslimbeji@gmail.com" bson:"email"`          // The user email
	IsAdmin  bool   `json:"isAdmin" validate:"required" example:"false" bson:"isAdmin"`                          // Whether the user is an admin or not
	Password any    `json:"password" validate:"required,min=8" example:"very_secret" bson:"password"`            // The user password, 8 characters at least
	ImageUrl string `json:"imageUrl" example:"avatar2_80e32f88-c9a5-4fcd-8a56-76b5889440cd.jpg" bson:"imageUrl"` // local url on the storage
}

type UserCreate struct {
	Name     string `json:"name" validate:"required,min=2" example:"Slim Beji" bson:"name"`                      // The user name, two characters at least
	Email    string `json:"email" validate:"required,email" example:"mslimbeji@gmail.com" bson:"email"`          // The user email
	IsAdmin  bool   `json:"isAdmin" validate:"required" example:"false" bson:"isAdmin"`                          // Whether the user is an admin or not
	Password any    `json:"password" validate:"required,min=8" example:"very_secret" bson:"password"`            // The user password, 8 characters at least
	ImageUrl string `json:"imageUrl" example:"avatar2_80e32f88-c9a5-4fcd-8a56-76b5889440cd.jpg" bson:"imageUrl"` // local url on the storage
}

type UserPost struct {
	Name     string                `json:"name" validate:"required,min=2" example:"Slim Beji" bson:"name"`             // The user name, two characters at least
	Email    string                `json:"email" validate:"required,email" example:"mslimbeji@gmail.com" bson:"email"` // The user email
	IsAdmin  bool                  `json:"isAdmin" validate:"required" example:"false" bson:"isAdmin"`                 // Whether the user is an admin or not
	Password any                   `json:"password" validate:"required,min=8" example:"very_secret" bson:"password"`   // The user password, 8 characters at least
	Image    *multipart.FileHeader `json:"image" bson:"image"`                                                         // User's profile image (JPEG)
}

type UserRead struct {
	Id       string   `json:"id" validate:"required,hexadecimal,len=24" example:"683b21134e2e5d46978daf1f" bson:"_id,omitempty"`         // The user ID, 24 characters
	Name     string   `json:"name" validate:"required,min=2" example:"Slim Beji" bson:"name"`                                            // The user name, two characters at least
	Email    string   `json:"email" validate:"required,email" example:"mslimbeji@gmail.com" bson:"email"`                                // The user email
	IsAdmin  bool     `json:"isAdmin" validate:"required" example:"false" bson:"isAdmin"`                                                // Whether the user is an admin or not
	ImageUrl string   `json:"imageUrl" example:"avatar2_80e32f88-c9a5-4fcd-8a56-76b5889440cd.jpg" bson:"imageUrl"`                       // local url on the storage
	Places   []string `json:"places" validate:"required,dive,hexadecimal,len=24" example:"[\"683b21134e2e5d46978daf1f\"]" bson:"places"` // The id of places belonging to the user, 24 characters
}

type UsersPaginated = types_.RecordsPaginated[PlaceRead]

type UserFilters struct {
	Page   string   `json:"page"`
	Size   string   `json:"size"`
	Sort   []string `json:"sort" validate:"dive,oneof=createdAt -createdAt name -name email -email"`
	Fields []string `json:"fields" validate:"dive,oneof=id name email isAdmin imageUrl places"`
	Id     []string `json:"id" filter:"string,hexadecimal,len=24"`                        // The user ID, 24 characters
	Name   []string `json:"name" filter:"string,min=2" example:"eq:Slim Beji"`            // The user name, two characters at least
	Email  []string `json:"email" filter:"string,email" example:"eq:mslimbeji@gmail.com"` // The user email
}

type UserUpdate struct {
	Name     string `json:"name" validate:"min=2" example:"Slim Beji" bson:"name"`             // The user name, two characters at least
	Email    string `json:"email" validate:"email" example:"mslimbeji@gmail.com" bson:"email"` // The user email
	Password any    `json:"password" validate:"min=8" example:"very_secret" bson:"password"`   // The user password, 8 characters at least
}

type UserPut struct {
	UserUpdate
}

// Code generated by go generate; DO NOT EDIT.
package schemas

import (
	"backend/internal/types_"
	"mime/multipart"
)

type UserBase struct {
	Name    string `json:"name" bson:"name" validate:"required,min=2"`
	Email   string `json:"email" bson:"email" validate:"required,email"`
	IsAdmin bool   `json:"isAdmin" bson:"isAdmin" validate:"required"`
}

type UserSeed struct {
	UserBase
	Ref      int
	Password any    `json:"password" bson:"password" validate:"required,min=8"`
	ImageUrl string `json:"imageUrl" bson:"imageUrl"`
}

type UserCreate struct {
	UserBase
	Password any    `json:"password" bson:"password" validate:"required,min=8"`
	ImageUrl string `json:"imageUrl" bson:"imageUrl"`
}

type UserPost struct {
	UserBase
	Password any                   `json:"password" bson:"password" validate:"required,min=8"`
	Image    *multipart.FileHeader `json:"image" bson:"image"`
}

type UserRead struct {
	UserBase
	Id       string   `json:"id" bson:"_id,omitempty" validate:"required,hexadecimal,len=24"`
	ImageUrl string   `json:"imageUrl" bson:"imageUrl"`
	Places   []string `json:"places" bson:"places" validate:"required,dive,hexadecimal,len=24"`
}

type UsersPaginated = types_.RecordsPaginated[PlaceRead]

type UserFilters struct {
	Page   string   `json:"page"`
	Size   string   `json:"size"`
	Sort   []string `json:"sort" validate:"dive,oneof=createdAt -createdAt name -name email -email"`
	Fields []string `json:"fields" validate:"dive,oneof=id name email isAdmin imageUrl places"`
	Id     []string `json:"id" filter:"string,hexadecimal,len=24"`
	Name   []string `json:"name" filter:"string,min=2"`
	Email  []string `json:"email" filter:"string,email"`
}

type UserUpdate struct {
	Name     string `json:"name" bson:"name" validate:"min=2"`
	Email    string `json:"email" bson:"email" validate:"email"`
	Password any    `json:"password" bson:"password" validate:"min=8"`
}

type UserPut struct {
	UserUpdate
}

// Code generated by go generate; DO NOT EDIT.
package schemas

import (
	"backend/internal/types_"
	"mime/multipart"
)

type Location struct {
	Lat float64 `json:"lat" example:"51.48180425016331" bson:"lat"`    // The latitude of the place
	Lng float64 `json:"lng" example:"-0.19090418688755467" bson:"lng"` // The longitude of the place
}

type PlaceDB struct {
	ID          string    `json:"id" validate:"hexadecimal,len=24" example:"683b21134e2e5d46978daf1f" bson:"_id,omitempty"`                 // The ID of the place 24 characters
	Title       string    `json:"title" validate:"min=10" example:"Stamford Bridge" bson:"title"`                                           // The place title/name, 10 characters minimum
	Description string    `json:"description" validate:"min=10" example:"Stadium of Chelsea football club" bson:"description"`              // The place description, 10 characters minimum
	Address     string    `json:"address" validate:"min=10" example:"Fulham road" bson:"address"`                                           // The place address
	Location    Location  `json:"location" bson:"location"`                                                                                 // Location object (can be sent as JSON string)
	ImageUrl    string    `json:"imageUrl" validate:"omitempty" example:"avatar2_80e32f88-c9a5-4fcd-8a56-76b5889440cd.jpg" bson:"imageUrl"` // local url on the storage
	Embedding   []float64 `json:"embedding" validate:"len=384" bson:"embedding"`                                                            // Title + Description embedding
	CreatorID   string    `json:"creatorId" validate:"hexadecimal,len=24" example:"683b21134e2e5d46978daf1f" bson:"creatorId"`              // The ID of the place creator, 24 characters
}

type PlacSeed struct {
	Ref         int
	CreatorRef  int
	Title       string    `json:"title" validate:"min=10" example:"Stamford Bridge" bson:"title"`                                           // The place title/name, 10 characters minimum
	Description string    `json:"description" validate:"min=10" example:"Stadium of Chelsea football club" bson:"description"`              // The place description, 10 characters minimum
	Address     string    `json:"address" validate:"min=10" example:"Fulham road" bson:"address"`                                           // The place address
	Location    Location  `json:"location" bson:"location"`                                                                                 // Location object (can be sent as JSON string)
	Embedding   []float64 `json:"embedding" validate:"len=384" bson:"embedding"`                                                            // Title + Description embedding
	ImageUrl    string    `json:"imageUrl" validate:"omitempty" example:"avatar2_80e32f88-c9a5-4fcd-8a56-76b5889440cd.jpg" bson:"imageUrl"` // local url on the storage
}

type PlaceCreate struct {
	Title       string    `json:"title" validate:"min=10" example:"Stamford Bridge" bson:"title"`                                           // The place title/name, 10 characters minimum
	Description string    `json:"description" validate:"min=10" example:"Stadium of Chelsea football club" bson:"description"`              // The place description, 10 characters minimum
	Address     string    `json:"address" validate:"min=10" example:"Fulham road" bson:"address"`                                           // The place address
	Location    Location  `json:"location" bson:"location"`                                                                                 // Location object (can be sent as JSON string)
	Embedding   []float64 `json:"embedding" validate:"len=384" bson:"embedding"`                                                            // Title + Description embedding
	ImageUrl    string    `json:"imageUrl" validate:"omitempty" example:"avatar2_80e32f88-c9a5-4fcd-8a56-76b5889440cd.jpg" bson:"imageUrl"` // local url on the storage
	CreatorID   string    `json:"creatorId" validate:"hexadecimal,len=24" example:"683b21134e2e5d46978daf1f" bson:"creatorId"`              // The ID of the place creator, 24 characters
}

type PlacePost struct {
	Title       string                `json:"title" form:"title" validate:"min=10" example:"Stamford Bridge" bson:"title"`                                    // The place title/name, 10 characters minimum
	Description string                `json:"description" form:"description" validate:"min=10" example:"Stadium of Chelsea football club" bson:"description"` // The place description, 10 characters minimum
	Address     string                `json:"address" form:"address" validate:"min=10" example:"Fulham road" bson:"address"`                                  // The place address
	Lat         float64               `json:"lat" form:"lat" example:"51.48180425016331" bson:"lat"`                                                          // The latitude of the place
	Lng         float64               `json:"lng" form:"lng" example:"-0.19090418688755467" bson:"lng"`                                                       // The longitude of the place
	Image       *multipart.FileHeader `json:"image" form:"image" validate:"omitempty" bson:"image" swaggerignore:"true"`                                      // Place Image (JPEG)
	CreatorID   string                `json:"creatorId" form:"creatorId" validate:"hexadecimal,len=24" example:"683b21134e2e5d46978daf1f" bson:"creatorId"`   // The ID of the place creator, 24 characters
}

type PlaceRead struct {
	ID          string   `json:"id" validate:"hexadecimal,len=24" example:"683b21134e2e5d46978daf1f" bson:"_id,omitempty"`                 // The ID of the place 24 characters
	Title       string   `json:"title" validate:"min=10" example:"Stamford Bridge" bson:"title"`                                           // The place title/name, 10 characters minimum
	Description string   `json:"description" validate:"min=10" example:"Stadium of Chelsea football club" bson:"description"`              // The place description, 10 characters minimum
	Address     string   `json:"address" validate:"min=10" example:"Fulham road" bson:"address"`                                           // The place address
	Location    Location `json:"location" bson:"location"`                                                                                 // Location object (can be sent as JSON string)
	ImageUrl    string   `json:"imageUrl" validate:"omitempty" example:"avatar2_80e32f88-c9a5-4fcd-8a56-76b5889440cd.jpg" bson:"imageUrl"` // local url on the storage
	CreatorID   string   `json:"creatorId" validate:"hexadecimal,len=24" example:"683b21134e2e5d46978daf1f" bson:"creatorId"`              // The ID of the place creator, 24 characters
}

type PlacesPaginated = types_.RecordsPaginated[PlaceRead]

type PlaceFilters struct {
	Page        int      `json:"page" default:"1"`
	Size        int      `json:"size" default:"100"`
	Sort        []string `json:"sort" validate:"dive,oneof=createdAt -createdAt title -title description -description address -address" example:"createdAt"`
	Fields      []string `json:"fields" validate:"dive,oneof=id title description address location.lat location.lng imageUrl creatorId" example:"id,title"`
	Id          []string `json:"id" form:"id" filter:"string,hexadecimal,len=24" example:"683b21134e2e5d46978daf1f" collectionFormat:"multi"`                  // The ID of the place 24 characters
	Title       []string `json:"title" form:"title" filter:"string,min=10" example:"eq:Some Place" collectionFormat:"multi"`                                   // The place title/name, 10 characters minimum
	Description []string `json:"description" form:"description" filter:"string,min=10" example:"regex:football" collectionFormat:"multi"`                      // The place description, 10 characters minimum
	Address     []string `json:"address" form:"address" filter:"string,min=10" example:"regex:d{2} Boulevard" collectionFormat:"multi"`                        // The place address
	CreatorId   []string `json:"creatorId" form:"creatorId" filter:"string,hexadecimal,len=24" example:"eq:683b21134e2e5d46978daf1f" collectionFormat:"multi"` // The ID of the place creator, 24 characters
	LocationLat []string `json:"locationLat" form:"locationLat" filter:"float64" example:"gt:3.5" collectionFormat:"multi"`                                    // The latitude of the place
	LocationLng []string `json:"locationLng" form:"locationLng" filter:"float64" example:"lt:4.5" collectionFormat:"multi"`                                    // The longitude of the place
}

type PlaceUpdate struct {
	Title       *string   `json:"title" validate:"omitempty,min=10" example:"Stamford Bridge" bson:"title"`                              // The place title/name, 10 characters minimum
	Description *string   `json:"description" validate:"omitempty,min=10" example:"Stadium of Chelsea football club" bson:"description"` // The place description, 10 characters minimum
	Address     *string   `json:"address" validate:"omitempty,min=10" example:"Fulham road" bson:"address"`                              // The place address
	Location    *Location `json:"location" validate:"omitempty" bson:"location"`                                                         // Location object (can be sent as JSON string)
	CreatorID   *string   `json:"creatorId" validate:"omitempty,hexadecimal,len=24" example:"683b21134e2e5d46978daf1f" bson:"creatorId"` // The ID of the place creator, 24 characters
}

type PlacePut struct {
	PlaceUpdate
}
